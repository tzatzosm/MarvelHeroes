//
//  CharactersListPresenter.swift
//  AsyncAwaitMarvelHeroes
//
//  Created by Marsel Tzatzos on 31/01/2022.
//  Copyright (c) 2022 QQ. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class CharactersListPresenter {

    // MARK: - Private properties -

    private unowned let view: CharactersListViewInterface
    private let interactor: CharactersListInteractorInterface
    private let wireframe: CharactersListWireframeInterface

    private var isLoading: Bool = false
    private var searchTerm: String? = nil
    private var hasNextPage: Bool = false
    private var characters: [CharacterData] = []

    // MARK: - Lifecycle -

    init(
        view: CharactersListViewInterface,
        interactor: CharactersListInteractorInterface,
        wireframe: CharactersListWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension CharactersListPresenter: CharactersListPresenterInterface {
    func search(for searchTerm: String?) {
        Task.detached {
            self.searchTerm = searchTerm
            self.resetState()
            await self.view.showResults(sections: self.constructSections())
            await self.performSearch()
        }
    }

    func loadNextPage() {
        if isLoading {
            return
        }
        Task.detached {
            await self.performSearch()
        }
    }

    func didSelect(character: CharacterData) {
        wireframe.navigateToCharacterDetails(character: character)
    }
}

private extension CharactersListPresenter {

    private func resetState() {
        hasNextPage = false
        isLoading = false
        characters.removeAll()
    }

    func constructSections() -> [CharactersListViewModel.Section] {
        if characters.isEmpty {
            let items: [CharactersListViewModel.Item] = (0..<10).map { .characterLoading(index: $0)}
            return [.init(sectionIdentifier: .heroes, items: items)]
        }
        let characterItems: [CharactersListViewModel.Item] = characters.map { .character(data: $0) }
        var sections: [CharactersListViewModel.Section] = [.init(sectionIdentifier: .heroes, items: characterItems)]
        if hasNextPage {
            sections.append(.init(sectionIdentifier: .loading, items: [.loadingNextPage]))
        }
        return sections
    }

    func performSearch() async {
        do {
            isLoading = true
            let responseData = try await self.interactor.search(for: self.searchTerm, offset: self.characters.count, limit: 10)
            isLoading = false
            self.characters.append(contentsOf: responseData.results ?? [])
            self.hasNextPage = responseData.total > self.characters.count
            await self.view.showResults(sections: self.constructSections())
        } catch {
            resetState()
            print("error \(error)")
        }
    }

}
