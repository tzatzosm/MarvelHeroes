//
//  CharacterDetailsViewController.swift
//  AsyncAwaitMarvelHeroes
//
//  Created by Marsel Tzatzos on 01/02/2022.
//  Copyright (c) 2022 QQ. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class CharacterDetailsViewController: UICollectionViewController {

    // MARK: - Typealias -
    private typealias DataSource = UICollectionViewDiffableDataSource<CharacterDetailsViewModel.SectionIdentifier, CharacterDetailsViewModel.Item>
    private typealias ThumbnailCellRegistration = UICollectionView.CellRegistration<CharacterDetailsThumbnailCollectionViewCell, String>
    private typealias DescriptionCellRegistration = UICollectionView.CellRegistration<CharacterDetailsDescriptionCollectionViewCell, String>
    private typealias ComicCellRegistration = UICollectionView.CellRegistration<CharacterDetailsComicsCollectionViewCell, CharacterDetailsViewModel.Item>
    private typealias Snapshot = NSDiffableDataSourceSnapshot<CharacterDetailsViewModel.SectionIdentifier, CharacterDetailsViewModel.Item>

    // MARK: - Public properties -

    var presenter: CharacterDetailsPresenterInterface!

    // MARK: - Private properties -

    private var dataSource: DataSource?
    private var snapshot: Snapshot!

    private let thumbnailCellRegistration = ThumbnailCellRegistration { (cell, _, imageUri) in
        cell.load(imageUri)
    }

    private let descriptionCellRegistration = DescriptionCellRegistration { (cell, _, text) in
        cell.load(text)
    }

    private let comicCellRegistration = ComicCellRegistration { (cell, _, item) in
        switch item {
        case let .comic(data):
            cell.load(data)
        case .comicsLoading:
            cell.startAnimating()
        default:
            break
        }
    }

    // MARK: - Init

    init() {
        let compositionalLayout = UICollectionViewCompositionalLayout { (sectionIndex: Int, environment: NSCollectionLayoutEnvironment) -> NSCollectionLayoutSection? in
            guard let section = CharacterDetailsViewModel.SectionIdentifier(rawValue: sectionIndex) else { return nil }
            switch section {
            case .header:
                // Item
                let itemSize = NSCollectionLayoutSize(
                    widthDimension: .fractionalWidth(1),
                    heightDimension: .estimated(100)
                )
                let item = NSCollectionLayoutItem(layoutSize: itemSize)

                // Group
                let groupSize = NSCollectionLayoutSize(
                    widthDimension: .fractionalWidth(1),
                    heightDimension: .estimated(100)
                )
                let group = NSCollectionLayoutGroup.vertical(
                    layoutSize: groupSize,
                    subitems: [item])
                return NSCollectionLayoutSection(group: group)
            case .comics:
                let sideInset: CGFloat = 5
                // Comics Group
                let itemSize = NSCollectionLayoutSize(
                    widthDimension: .fractionalWidth(1/3),
                    heightDimension: .fractionalWidth(1/2))
                let item = NSCollectionLayoutItem(layoutSize: itemSize)
                item.contentInsets = .init(top: 0, leading: sideInset, bottom: 0, trailing: sideInset)

                // https://stackoverflow.com/a/60125262/1242102
                let groupWidth = environment.container.contentSize.width * 0.93
                let groupSize = NSCollectionLayoutSize(
                    widthDimension: .absolute(groupWidth),
                    heightDimension: .fractionalWidth(1/2))
                let group = NSCollectionLayoutGroup.horizontal(
                    layoutSize: groupSize,
                    subitem: item,
                    count: 3)

                let sectionSideInset = (environment.container.contentSize.width - groupWidth) / 2
                let section = NSCollectionLayoutSection(group: group)
                section.contentInsets = .init(top: 0, leading: sectionSideInset, bottom: 0, trailing: sectionSideInset)
                section.orthogonalScrollingBehavior = .groupPaging

                let headerItemSize = NSCollectionLayoutSize(
                    widthDimension: .fractionalWidth(1.0),
                    heightDimension: .estimated(30)
                )
                let headerItem = NSCollectionLayoutBoundarySupplementaryItem(
                    layoutSize: headerItemSize,
                    elementKind: "header",
                    alignment: .top
                )
                section.boundarySupplementaryItems = [headerItem]
                return section
            }
        }
        super.init(collectionViewLayout: compositionalLayout)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
        Task.detached {
            await self.presenter.configure()
        }
    }

}

// MARK: - Configuration -

private extension CharacterDetailsViewController {
    func configure() {
        configureCollectionView()
    }

    func configureCollectionView() {
        collectionView.keyboardDismissMode = .onDrag
        collectionView.register(
            CharacterDetailsSectionHeaderSupplementaryView.self,
            forSupplementaryViewOfKind: "header",
            withReuseIdentifier: "header"
        )
        dataSource = DataSource(collectionView: collectionView, cellProvider: { [weak self] collectionView, indexPath, item in
            guard let self = self else { return nil }
            switch item {
            case let .thumbnail(imageUri):
                return collectionView.dequeueConfiguredReusableCell(
                    using: self.thumbnailCellRegistration,
                    for: indexPath,
                    item: imageUri)
            case let .description(text):
                guard let text = text else { return nil }
                return collectionView.dequeueConfiguredReusableCell(
                    using: self.descriptionCellRegistration,
                    for: indexPath,
                    item: text)
            case .comic, .comicsLoading:
                return collectionView.dequeueConfiguredReusableCell(
                    using: self.comicCellRegistration,
                    for: indexPath,
                    item: item)
            }
        })
        dataSource?.supplementaryViewProvider = { [weak self] collectionView, kind, indexPath in
            guard let self = self, let section = self.dataSource?.sectionIdentifier(for: indexPath.section) else { return nil }
            let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "header", for: indexPath) as? CharacterDetailsSectionHeaderSupplementaryView
            switch section {
            case .comics:
                header?.setTitle("Comics")
            default:
                return nil
            }
            return header
        }
    }
}

// MARK: - Extensions -

extension CharacterDetailsViewController: CharacterDetailsViewInterface {
    func setTitle(_ title: String) {
        self.title = title
    }

    func showData(sections: [CharacterDetailsViewModel.Section]) {
        var snapshot = Snapshot()
        snapshot.appendSections(sections.map { $0.sectionIdentifier })
        sections.forEach { section in
            snapshot.appendItems(section.items, toSection: section.sectionIdentifier)
        }
        dataSource?.apply(snapshot)
    }
}
