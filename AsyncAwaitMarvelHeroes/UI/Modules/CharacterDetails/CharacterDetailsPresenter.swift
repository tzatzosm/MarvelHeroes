//
//  CharacterDetailsPresenter.swift
//  AsyncAwaitMarvelHeroes
//
//  Created by Marsel Tzatzos on 01/02/2022.
//  Copyright (c) 2022 QQ. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import SwiftUI

final class CharacterDetailsPresenter {

    // MARK: - Private properties -

    private unowned let view: CharacterDetailsViewInterface
    private let interactor: CharacterDetailsInteractorInterface
    private let wireframe: CharacterDetailsWireframeInterface

    private let character: CharacterData

    // MARK: - Lifecycle -

    init(
        view: CharacterDetailsViewInterface,
        interactor: CharacterDetailsInteractorInterface,
        wireframe: CharacterDetailsWireframeInterface,
        character: CharacterData
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.character = character
    }
}

// MARK: - Extensions -

extension CharacterDetailsPresenter: CharacterDetailsPresenterInterface {
    func configure() async {
        await view.setTitle(character.name)
        let items: [CharacterDetailsViewModel.Item] = [
            .thumbnail(imageUrl: character.thumbnail.URI),
            .description(text: character.resultDescription)
        ]
        var sections: [CharacterDetailsViewModel.Section] = [.init(sectionIdentifier: .header, items: items)]
        sections.append(.init(sectionIdentifier: .comics, items: (0..<3).map { .comicsLoading(index: $0) }))
        await view.showData(sections: sections)
        do {
            let comics = try await interactor.getComics(characterId: character.id)
            sections.removeLast()
            sections.append(.init(sectionIdentifier: .comics, items: comics.map { .comic(data: $0) }))
            await view.showData(sections: sections)
        } catch {
            print("error")
        }
    }
}
